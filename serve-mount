#!/bin/bash

# POSITIONAL ARGUMENTS
#   1 to ..     script options
#   .. to --    mount command with MOUNTPOINT instead of actual mountpoint
#   after --    program path and arguments

# EXIT CODES
#   In general, the exit code of the program is returned.
#   However, the following exit codes can also be returned under other circumstances:
#       126     cannot execute program
#       127     program was not found
#       128     invalid exit argument
#       255     error occurred or received exit signal

# see also https://tldp.org/LDP/abs/html/exitcodes.html



set -o errexit   # abort on nonzero exitstatus; also see https://stackoverflow.com/a/11231970
set -o nounset   # abort on unbound variable
set -o pipefail  # don't hide errors within pipes
set -o errtrace
SCRIPT_DIR="$(dirname "$(realpath "$BASH_SOURCE")")"

source "$SCRIPT_DIR/utils/mount-utils.sh"
ORIGINAL_PWD="$PWD"
MOUNTPOINT_PLACEHOLDER="MOUNTPOINT"



# ---- UTILS ----

log_err () { echo "ERROR: $1" >&2; }
log_warn () { echo "WARN: $1" >&2; }
log_info () { echo "$1"; }


is_temp_mount() {
    [[ ! ${CUSTOM_MOUNTPOINT+1} ]];
}


# by default, this script should not terminate from signals
for ((i=0; i<100; i++)); do
    trap : $i 2>/dev/null && true
done
# terminate from these signals
for signal in TERM INT QUIT KILL HUP PIPE; do
    trap "exit 255" $signal
done



# ---- PARSE ARGUMENTS ----

# (no longer) adapted from https://stackoverflow.com/a/14203146

# first, collect script arguments
is_done="false"
while [[ (($# > 0)) && $is_done == "false" ]]; do
    case "$1" in
        "--mountpoint")
            if [[ ! ${2+1} ]]; then log_err "must specify mountpoint"; exit 1; fi
            CUSTOM_MOUNTPOINT="$2"
            shift
            shift
            ;;
        "--allow-empty")
            ALLOW_EMPTY="true"
            shift
            ;;
        *)
            is_done="true"
            ;;
    esac
done

# then, collect mount command
if (($# == 0)); then log_err "missing mount command"; exit 1; fi
MOUNT_CMD=()
while [[ (($# > 0)) && $1 != "--" ]]; do
    MOUNT_CMD+=("$1")
    shift
done

# remove -- delimiter
if (($# == 0)); then log_err "missing -- delimiter"; exit 1; fi
shift

# rest is program command
# extract program path
if (($# == 0)); then log_err "missing program command"; exit 1; fi
PROGRAM_PATH="$1"
shift
if [[ $PROGRAM_PATH == ./* || $PROGRAM_PATH == ../* ]]; then
    # relative path; convert to absolute
    PROGRAM_PATH="$PWD"/"$PROGRAM_PATH"
fi







# ---- CLEANUP FUNCTIONS ----

# define function to be run at exit
# retval is either set by an 'exit' statement, or is 255 because a signal handler was called.
# NOTE: if interrupt signal is received during cleanup, signal handler is called again, but does not call exit handler

exit_handler () {
    retval=$1

    # define handler for when cleanup fails
    # note that it is not possible trap EXIT inside of exit handler
    err_handler () {
        log_err "cleanup failed" && true
        exit 255
    }
    trap err_handler ERR

    log_info ""
    if [[ ${IS_LAUNCHED+1} ]]; then
        if ((retval==255)); then
            # either the program exited with code 255 or a signal handler was called
            log_warn "program either finished with code 255 or has been aborted"
        else
            # program exited
            # exit code will be either program exit code or special exit code like 126, 127 or 128
            log_info "program has finished with code $retval"
        fi
    else
        # program was not launched
        if ((retval==0)); then
            # this means that exit 0 was called before the program was started, which should NOT happen
            log_err "program was not launched"
        elif ((retval==255)); then
            log_err "program was not launched: received exit signal"
        else
            log_err "program was not launched: an error occurred"
        fi
        retval=255
    fi

    # retval is now either the exit code of the program, a special exit code, or 255.
    cleanup
    exit $retval
}


cleanup () {
    if [[ ${MOUNT_PID+1} ]]; then
        stop_mount $MOUNT_PID "$MOUNTPOINT"
    fi
    if [[ ${MOUNTPOINT+1} ]]; then
        delete_mount_dir
    fi
}

delete_mount_dir () {
    # when mount could not be unmounted, rm might fail
    if is_temp_mount; then
        rm -d "$MOUNTPOINT" && true
        if (($?>0)); then log_err "could not delete temporary mount folder"; return 1; fi
    fi
    return 0
}


# must always exit with 0 to not overwrite exit code of left pipe part
# $1: file descriptor
fd_wrapper () {
    # ignore all signals
    for ((i=0; i<100; i++)); do
        trap : $i 2>/dev/null && true
    done
    # redirect stdin to file descriptor
    # nothing happens if file descriptor is invalid
    while IFS= read -r line; do
        echo "$line" >&$1 2>/dev/null && true
    done
    exit 0
}



# if stdout or stderr are not connected anymore at some point in this script,
# then SIGPIPE is received, which leads to the script exiting with 255.
# however, the exit handler contains 'echo' calls, which would fail
# we thus connect stdout and stderr of the exit handler to a safety wrapper

safe_exit_handler () {
    retval=$?
    set +m
    cd "$ORIGINAL_PWD"

    # we want to keep stdout and stderr separate AND we want to keep the order
    # however, if stdout and stderr are written to separate processes, then race condition can happen and the order is not preserved
    # thus: if stdout and stderr point to same thing, use only one safety wrapper
    # otherwise order does not matter and we can use two wrappers
    if [[ "$(readlink /proc/$$/fd/1)" == "$(readlink /proc/$$/fd/2)" ]]; then
        # stdout and stderr are the same, merge them
        # pipe exits with exit code of exit_handler because we set pipefail and fd_wrapper exits with 0
        exit_handler $retval 2>&1 | fd_wrapper 1
        exit $?
    else
        # stdout and stderr are different, keep them separate
        exit_handler $retval 1> >(fd_wrapper 1) 2> >(fd_wrapper 2)
        exit $?
    fi

    # obsolete, but keep for safety
    exit 255
}

trap safe_exit_handler EXIT









# ---- MOUNTING ----

if is_temp_mount; then
    log_info "mounting in temporary folder"
else
    log_info "mounting in $CUSTOM_MOUNTPOINT"
fi

# create mount folder
if is_temp_mount; then
    MOUNTPOINT="$(mktemp -d)"
else
    if [[ ! -d $CUSTOM_MOUNTPOINT ]]; then
        log_err "mountpoint does not exist"
        exit 1
    fi
    MOUNTPOINT="$CUSTOM_MOUNTPOINT"
fi

# replace mount point placeholder with actual mount point
is_set="false"
for i in "${!MOUNT_CMD[@]}"; do
   if [[ "${MOUNT_CMD[$i]}" == "$MOUNTPOINT_PLACEHOLDER" ]]; then
       MOUNT_CMD[$i]="$MOUNTPOINT"
       is_set="true"
   fi
done
if [[ $is_set == "false" ]]; then
    log_err "mount command does not contain $MOUNTPOINT_PLACEHOLDER placeholder"
    exit 1
fi



# ------ LAUNCHING THE MOUNT PROCESS ------

# GENERAL INFORMATION on session and terminal
    # a session has at most one controlling terminal.
    # If a session has a controlling terminal, it has exactly one foreground process group. The other groups are background groups.
    # The foreground process group is the group with the right to interact with the terminal.

    # example: daemons are usually in a session without controlling terminal
    # see https://stackoverflow.com/a/6553076
    # see https://askubuntu.com/a/979116

# GENERAL INFORMATION on signals
    # keyboard generated signals are received by entire foreground process group.
    # if a background process tries to read from its controlling terminal, its group receives SIGTTIN.
    # if a background process tries to write to its controlling terminal, its group MIGHT receive SIGTTOU.
        # behavior can be controlled with terminal option TOSTOP. By default, SIGTTOU is not sent.
    # if a background process tries to set a terminal's modes, its group also receives SIGTTOU.

    # see https://stackoverflow.com/q/72758706
    # see https://unix.stackexchange.com/q/550097#comment1021063_550097

# REQUIREMENTS for mount process
    # 1. mount process should not react to keyboard exit signals like SIGINT, because we want to shut down the mount gracefully ourselves,
    #   e.g. with a timeout if the mount process is still busy.
    # 2. mount process output should be sent to terminal
    # 3. able to kill even the children of mount process

# OPTION A) run in background without job control
    # stdout and stderr are copied from shell, stdin is set to /dev/null.
    # Command is executed in same process group as shell.
    # Command will, by default, ignore SIGINT and SIGQUIT (see https://unix.stackexchange.com/a/677742).
    # However, command can override this and define its own signal handlers (e.g. rclone does this).

    # Satisfies requirement 2, but not 1 and 3

# OPTION B) run in background with job control
    # FDs are copied from shell
    # Command is executed in new background process group

    # Satisfies requirements
        # 1
        # 2, as long as a) the terminal option TOSTOP is not set, and b) it does not try to read from the terminal
        # 3, as long as the children stay in the new process group

    # see https://www.gnu.org/software/libc/manual/html_node/Job-Control-Signals.html
    # see https://www.gnu.org/software/bash/manual/html_node/Job-Control-Basics.html

# OPTION C) run in background with setsid
    # FDs are copied from shell, but stdin should be closed or set to /dev/null to avoid weird terminal state.
    # Command is executed in new session without controlling terminal

    # Satisfies requirements
        # 1
        # 2 (because the terminal is not the process' controlling terminal, it does not receive SIGTTOU;
        #    see https://unix.stackexchange.com/a/551649)
        # 3, as long as children stay in new session

# EXAMPLE: sshfs, prompting the user for a password, e.g. if no ssh keys are set up
    # sshfs process is spawned
    # sshfs spawns ssh process with same session and same process group, but parent set to init
    # even if sshfs redirects everything to /dev/null, the ssh process still writes a password prompt to terminal,
    # likely by writing directly to its controlling terminal and not stdout.

    # If sshfs is executed in a new background group with job control, it receives SIGTTOU and stops.
    # The post at https://unix.stackexchange.com/a/93778 suggests that ssh explicitly enables SIGTTOU, which might be the reason.
    # It might also be because ssh tries to set terminal options.

    # if sshfs is executed with setsid, it does not receive SIGTTOU. It also does not prompt for a password,
    # likely because it does not have a controlling terminal.
    # stdout is still set to the original terminal and can thus be observed.

set -m  # enable job control
"${MOUNT_CMD[@]}" <&- &  # spawn in new background process group
MOUNT_PID=$!
set +m  # disable job control

# wait until mount becomes available
wait_mount $MOUNT_PID "$MOUNTPOINT"

# successfully mounted
# do not allow empty mount dir
# this happens e.g. when rclone mounts an invalid path
if [[ ! ${ALLOW_EMPTY+1} && ! "$(ls -A "$MOUNTPOINT")" ]]; then
    log_err "mount is empty"
    exit 1
fi
log_info "mount successful"





# ---- RUNNING THE PROGRAM  ----
log_info "launching $PROGRAM_PATH"
log_info ""

# process should be able to access the original working directory (where this script was executed in)
export ORIGINAL_PWD
# working directory for process is the mount folder
cd "$MOUNTPOINT"
IS_LAUNCHED=1
"$PROGRAM_PATH" "$@" && true
# if both this script and the program receive a signal, then once the program terminates, the script signal handler is called
# it thus does not matter what the program does or what it returns
# if only the program receives a signal, then either a) the program handles it and exits, which is just like a normal exit,
# or b) it notifies its parent (i.e. this script) about it, which then calls its script handler
exit $?
